# Allow borg head to connect to borg store using a keypaird dedicated to borg

- name: "{{ borg_task_name_prefix }}: add borg head ssh key to remote borg store authorized_key"
  authorized_key:
    user: "{{ borg_store_user }}"
    key: "{{ borg_head_ssh.public_key }}"
    state: present
  when: borg_store_is_remote | bool
  delegate_to: "{{ borg_store_inventory_hostname }}"
  ignore_unreachable: yes

# Pre-register borg store public ssh keys to borg head so no user input is asked
# the first time the bord head connects to the borg store

- name: "{{ borg_task_name_prefix }}: gather store's ssh public keys"
  command: "ssh-keyscan {{ borg_store_host }}"
  register: borg_store_host_public_keys
  changed_when: false

- name: "{{ borg_task_name_prefix }}: register borg store hosts ssh public keys"
  lineinfile:
    dest: ~/.ssh/known_hosts
    line: "{{ stdout_line }}"
    create: true
  with_items: "{{ borg_store_host_public_keys.stdout_lines }}"
  loop_control:
    loop_var: stdout_line

# Configure borg

- name: "{{ borg_task_name_prefix }}: instanciate borg environment on borg head"
  template:
    src: env.j2
    dest: "/usr/local/etc/borg/{{ borg_store_inventory_hostname }}.env"
    mode: 0400

- name: "{{ borg_task_name_prefix }}: init backup repository"
  command: borg init --encryption=repokey
  register: borg_init
  changed_when: borg_init.rc == 0
  failed_when: not (borg_init.rc == 0 or (borg_init.rc == 2 and borg_init.stderr.startswith("A repository already exists")))
  environment:
    # TODO: this replicates env.j2
    BORG_PASSPHRASE: "{{ borg_passphrase }}"
    BORG_REPO: "{{ borg_repo }}"
    BORG_RSH: "ssh -i {{ borg_head_ssh.filename }}"
  ignore_errors: yes

- name: "{{ borg_task_name_prefix }}: start backup script systemd timer"
  systemd:
    name: "backup@{{ borg_store_inventory_hostname }}.timer"
    enabled: true
    state: started
